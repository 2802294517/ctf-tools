//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: Torrent.bt
//   Authors: Bartosz Dziewonski
//   Version: 1.20
//   Purpose: Parse torrent files.
//  Category: Internet
// File Mask: *.torrent
//  ID Bytes: 
//   History: 
//   1.20  2022-03-01 qiuqiu: Some fix, Suitable for version 8 and above.
//   1.11  2021-09-27 qiuqiu: Reorganization
//   1.1   2021-09-10 qiuqiu: Minor Update
//   1.0   2018-01-31 Bartosz Dziewonski: Initial version.
//------------------------------------------------
// color
// LIST  = 0xF092B3
// DICT  = 0x70ABFF
// BINT  = 0x79C398
// BSTR  = 0xFFB879
// NUM1  = 0x70ABFF
// NUM2  = 0xFFB879
// COLON = 0x00D7FF
//

int64 find_next( char terminator ) {
    local int64 pos = FTell();
    local int64 len = 0;
    while( ReadByte(pos+len) != terminator )
        len++;
    return len;
}

int valid_utf8(uchar data[], int size) {
  local int i = 0, x = 0, cnt = 0;
  for (i = 0; i < size; i++) {
    x = (ubyte)data[i];
    if (!cnt) {
      if ((x >> 5) == 0b110) {
        cnt = 1;
      } else if ((x >> 4) == 0b1110) {
        cnt = 2;
      } else if ((x >> 3) == 0b11110) {
        cnt = 3;
      } else if ((x >> 7) != 0) return false;
    } else {
      if ((x >> 6) != 0b10) return false;
      cnt--;
    }
  }
  return cnt == 0;
}

char[] bin2hex (const char buf_in[], const int buf_size) {
    local const char hex_str[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
    local char result[buf_size * 2];
    local int i;
    for (i = 0; i < buf_size; i++) {
        result[i * 2 + 0] = hex_str[(buf_in[i] >> 4) & 0x0F];
        result[i * 2 + 1] = hex_str[(buf_in[i]     ) & 0x0F];
    }
    return result;
}

string UnixToDateTime(int64 v) {
    return TimeTToString(v, "yyyy/MM/dd hh:mm:ss UTC");
}

int64 Atoi64(const char s[])
{
    local int64 n;
    SScanf(s, "%Ld", n);
    return n;
}

string FormatBytes(uint64 bytes)
{
	local const char units[6] = {' ', 'K', 'M', 'G', 'T', 'P'};
	local char length = sizeof(units) / sizeof(units[0]);
    local string suffix = "", fmt = "%.00lf %s";
	local int i = 0;
	local double dblBytes = bytes;
    
	if (bytes >= 1024) {
        fmt = "%.02lf %s";
		for (i = 0; (bytes / 1024) > 0 && i<length-1; i++, bytes /= 1024)
			dblBytes = bytes / 1024.0;

        suffix += units[i];
        suffix += "B";
	} else suffix = "Bytes";

	local char output[200];
	SPrintf(output, fmt, dblBytes, suffix);
	return output;
}

string fmt_piece(struct Piece &v) {
    return bin2hex(v.rawdata, 20);
}

typedef struct {
    char rawdata[20];
} Piece <read=fmt_piece>;

string fmt_pieces(struct Pieces &v){
    local string str;
    SPrintf(str, "(piece: %d)", v.count);
    return str;
}
typedef struct {
    local char c  <hidden=true> = ReadByte();
    char length[find_next(':')]    <comment="length", fgcolor=cGreen>;
    local int count <hidden=true> = Atoi64(length) / 20;
    char delimiter                 <comment="delimiter", fgcolor=cRed>;
    while (count--) {
        struct Piece piece         <name="piece data", comment="SHA1 hash value", fgcolor=0x87d700>;
    }
    count = Atoi64(length) / 20;
} Pieces <read=fmt_pieces>;

typedef struct {
    local char c  <hidden=true> = ReadByte();
    switch (c) {
        // byte strings
        case '0': case '1': case '2': case '3': case '4':
        case '5': case '6': case '7': case '8': case '9': {
            char length[find_next(':')]   <comment="length",    fgcolor=cGreen>;
            char delimiter                <comment="delimiter", fgcolor=cRed>;
            char rawdata[Atoi64(length)]  <comment="raw data">;
            local wstring value <hidden=true> = StringToWString(rawdata, CHARSET_UTF8);
            break;
        }
        // integer
        case 'i': {
            char initial                 <name="int64_initial",  comment="Initial", fgcolor=cDkAqua>;
            char rawdata[find_next('e')] <name="raw data",       comment="int64 string", fgcolor=cAqua>;
            char trailing                <name="int64_trailing", comment="Trailing", fgcolor=cDkAqua>;
            local int64 value <hidden=true> = Atoi64(rawdata);
            break;
        }
        // lists
        case 'l': {
            local int count            <hidden=true> = 0;
            char initial               <name="list_initial", comment="Initial", fgcolor=cPurple>;
            while (ReadByte() != 'e') {
                count++;
                struct BDecode item    <name="list_item", read=get_string, comment=get_type>;
            }
            char trailing              <name="list_trailing", comment="Trailing", fgcolor=cPurple>;
            break;
        }
        // dictionary
        case 'd': {
            local int count             <hidden=true> = 0;
            char initial                <name="dict_initial", comment="Initial", fgcolor=0x00afff>;
            while (ReadByte() != 'e') {
                count++;
                struct BDecode key      <name="dict_key", read=get_string, comment=get_type>;
                switch ( key.value ) {
                    case "ed2k": case "md5sum":
                    case "filehash"      : struct BDecode value    <name="dict_value", read=get_hex,    comment=get_type>; break;
                    case "pieces"        : struct Pieces  value    <name="dict_value", comment="SHA1 hash values">;        break;
                    case "creation date" : struct BDecode value    <name="dict_value", read=get_date,   comment=get_type>; break;
                    case "piece length"  : 
                    case "length"        : struct BDecode value    <name="dict_value", read=get_size,   comment=get_type>; break;
                    default              : struct BDecode value    <name="dict_value", read=get_string, comment=get_type>;
                }
            }
            char trailing               <name="dict_trailing", comment="Trailing", fgcolor=0x00afff>;
            break;
        }

        default: Printf("%s", "error");
    }

} BDecode;

wstring get_string(const struct BDecode &v) {
    local string str;
    switch (v.c) {
        case '0': case '1': case '2': case '3': case '4':
        case '5': case '6': case '7': case '8': case '9': {
            return v.value;
            break;
        }
        case 'i': {
            SPrintf(str, "%Ld (%#LX)", v.value, v.value);
            break;
        }
        case 'l': {
            SPrintf(str, "(list: %d)", v.count );
            break;
        }
        case 'd': {
            SPrintf(str, "(dict: %d)", v.count );
            break;
        }
        default: str = "";
    }
    return (wstring)(str);
}

string get_type(const struct BDecode &v) {
    string s;
    switch (v.c) {
        case '0': case '1': case '2': case '3': case '4':
        case '5': case '6': case '7': case '8': case '9': s = "Byte String"; break;
        case 'i': s = "64bit Integer"; break;
        case 'l': s = "List"; break;
        case 'd': s = "Dictionary"; break;
        default: s = "Unknown";
    }
    return s;
}

string get_date (const struct BDecode &v) {
    return UnixToDateTime(Atoi64(v.rawdata));
}

string get_hex(const struct BDecode &v) {
    return bin2hex(v.rawdata, Atoi64(v.length));
}

string get_size(const struct BDecode &v) {
    return FormatBytes(v.value);
}

int find_key(struct BDecode &dict, string key) {
    local int index = -1, i;
    for (i = 0; i < dict.count; i++) {
        if (Stricmp(dict.key[i].rawdata, key) == 0) {
            index = i;
            break;
        }
    }
    return index;
}

string get_info_hash(const struct BDecode &v) {
    local int64 i, start = 0, size = 0;
    local char result[];
    i = find_key(v, "info");
    if (i > -1) {
        start = startof(v.value[i]);
        size  = sizeof(v.value[i]);
        ChecksumAlgStr(CHECKSUM_SHA1, result, start, size);
    }
    return result;
}

FSeek(0);
BDecode contents  <name="Torrent", open=true>;
local string hash <name="info_hash", comment="Info Dictionary SHA1 Hash", hidden=false>;
hash = get_info_hash(contents);
