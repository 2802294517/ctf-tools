//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: Torrent.bt
//   Authors: qiuqiu, Bartosz Dziewonski
//   Version: 1.11
//   Purpose: Parse torrent files.
//  Category: Internet
// File Mask: *.torrent
//  ID Bytes: 
//   History:
//   1.11  2021-09-27 qiuqiu: Reorganization
//   1.1   2021-09-10 qiuqiu: Minor Update
//   1.0   2018-01-31 Bartosz Dziewonski: Initial version.
//------------------------------------------------
// color
// LIST  = 0xF092B3
// DICT  = 0x70ABFF
// BINT  = 0x79C398
// BSTR  = 0xFFB879
// NUM1  = 0x70ABFF
// NUM2  = 0xFFB879
// COLON = 0x00D7FF
RequiresVersion(10,0);

int64 find_next( char terminator ) {
    local int64 pos = FTell();
    local int64 len = 0;
    while( ReadByte(pos+len) != terminator )
        len++;
    return len;
}

int valid_utf8(char data[], int size) {
  int i, x, cnt = 0;
  for (i = 0; i < size; i++) {
    x = data[i];
    if (!cnt) {
      if ((x >> 5) == 0b110) {
        cnt = 1;
      } else if ((x >> 4) == 0b1110) {
        cnt = 2;
      } else if ((x >> 3) == 0b11110) {
        cnt = 3;
      } else if ((x >> 7) != 0) return false;
    } else {
      if ((x >> 6) != 0b10) return false;
      cnt--;
    }
  }
  return cnt == 0;
}

string UnixToDateTime(int64 v) {
    return TimeTToString(v, "yyyy/MM/dd hh:mm:ss UTC");
}

string fmt_date (struct bencode &v) {
    return UnixToDateTime(Atoi(v.integer));
}

string str2hex (struct bencode &v) {
    local uchar uc[Atoi(v.length)];
    uc = v.str;
    return tohex(uc);
}

uint32 to_uint(byte b1, byte b2, byte b3, byte b4) {
    return (uint32)(((b1 & 0xFF) << 24) | ((b2 & 0xFF) << 16) | ((b3 & 0xFF) << 8) | (b4 & 0xFF));
}

string tohex(uchar in_bytes[]) {
    local uint32 ui32_temp;
    local string s_temp, result;
    local int i;
    for (i = 0; i < sizeof(in_bytes); i += 4) {
        ui32_temp = to_uint(in_bytes[i+0], in_bytes[i+1], in_bytes[i+2], in_bytes[i+3]);
        SPrintf(s_temp, "%08X", ui32_temp);
        result += s_temp;
    }
    return result;
}

string bytes_to_hex (struct bytes &v) {
    return tohex(v.str);
}

typedef struct (int n) {
    uchar str[n]<format=hex>;
} bytes ;


string fmt_pieces (struct pieces &v) {
    local string s;
    SPrintf(s, "(pieces: %d)", Atoi(v.length) / 20);
    return s;
}

typedef struct {
    char length[ find_next(':') ]<fgcolor=0x70ABFF>;
    char string_identifier<fgcolor=cRed>;
    local int n <hidden=true> = Atoi(length) / 20;
    while (n--) {
        struct bytes str(20) <read=bytes_to_hex,fgcolor=0x1557BF>;
    }
} pieces <read=fmt_pieces>;

typedef struct {
    local char identifier<hidden=true> = ReadByte();
    if (identifier == 'i') {
        char int_identifier<fgcolor=0xF092B3>;
        char integer[ find_next('e') ]<fgcolor=0x79C398>;
        char terminator<fgcolor=0xF092B3>;
    } else if (identifier == 'l') {
        local int length<hidden=true> = 0;
        char list_identifier<fgcolor=0xF092B3>;
        while (ReadByte() != 'e') {
            length++;
            struct bencode item;
        }
        char terminator <fgcolor=0xF092B3>;
    } else if (identifier == 'd') {
        local int length<hidden=true> = 0;
        char dict_identifier<fgcolor=0x5F69F9>;
        while (ReadByte() != 'e') {
            length++;
            struct bencode key;
            if ( (Stricmp(key.str, "ed2k") == 0) || (Stricmp(key.str, "filehash") == 0) || (Stricmp(key.str, "md5sum") == 0) )
                struct bencode value<read=str2hex>;
            else if (Stricmp(key.str, "creation date") == 0)
                struct bencode value<read=fmt_date>;
            else if (Stricmp(key.str, "pieces") == 0){
                struct pieces value;}
            else
                struct bencode value;
        }
        char terminator<fgcolor=0x5F69F9>;
    } else {
        char length[ find_next(':') ]<fgcolor=0x70ABFF>;
        char string_identifier<fgcolor=0xB0C94E>;
        char str[ Atoi(length) ];
    }
} bencode <read=read_bencode>;

wstring read_bencode( struct bencode &v ) {
    string s;
    if (v.identifier == 'i')
        return v.integer;
    if (v.identifier == 'l') {
        SPrintf( s, "(list: %u)", v.length );
        return s;
    }
    if (v.identifier == 'd') {
        SPrintf( s, "(dict: %u)", v.length );
        return s;
    }
    if ( valid_utf8(v.str, Atoi(v.length)) == 0 ) 
        return StringToWString(v.str, CHARSET_UTF8);
    else
        return v.str;
}

bencode contents<name="Torrent">;
